/* tslint:disable */
/* eslint-disable */
/**
 * YouBet Task API
 * YouBet Task RESTful API 文档
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ERC20StatsDto } from '../models';
// @ts-ignore
import type { ERC20TransferControllerGetTransfers200Response } from '../models';
/**
 * ERC20TransfersApi - axios parameter creator
 * @export
 */
export const ERC20TransfersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get ERC20 transfer statistics with optional filtering
         * @param {string} [from] Filter by sender address
         * @param {string} [to] Filter by receiver address
         * @param {string} [startTime] Start time filter (ISO string)
         * @param {string} [endTime] End time filter (ISO string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRC20TransferControllerGetStats: async (from?: string, to?: string, startTime?: string, endTime?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/erc20-transfers/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get ERC20 transfers with optional from/to filtering
         * @param {string} [from] Filter by sender address
         * @param {string} [to] Filter by receiver address
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRC20TransferControllerGetTransfers: async (from?: string, to?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/erc20-transfers/transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ERC20TransfersApi - functional programming interface
 * @export
 */
export const ERC20TransfersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ERC20TransfersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get ERC20 transfer statistics with optional filtering
         * @param {string} [from] Filter by sender address
         * @param {string} [to] Filter by receiver address
         * @param {string} [startTime] Start time filter (ISO string)
         * @param {string} [endTime] End time filter (ISO string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRC20TransferControllerGetStats(from?: string, to?: string, startTime?: string, endTime?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERC20StatsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRC20TransferControllerGetStats(from, to, startTime, endTime, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERC20TransfersApi.eRC20TransferControllerGetStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get ERC20 transfers with optional from/to filtering
         * @param {string} [from] Filter by sender address
         * @param {string} [to] Filter by receiver address
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRC20TransferControllerGetTransfers(from?: string, to?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ERC20TransferControllerGetTransfers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRC20TransferControllerGetTransfers(from, to, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERC20TransfersApi.eRC20TransferControllerGetTransfers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ERC20TransfersApi - factory interface
 * @export
 */
export const ERC20TransfersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ERC20TransfersApiFp(configuration)
    return {
        /**
         * 
         * @summary Get ERC20 transfer statistics with optional filtering
         * @param {string} [from] Filter by sender address
         * @param {string} [to] Filter by receiver address
         * @param {string} [startTime] Start time filter (ISO string)
         * @param {string} [endTime] End time filter (ISO string)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRC20TransferControllerGetStats(from?: string, to?: string, startTime?: string, endTime?: string, options?: RawAxiosRequestConfig): AxiosPromise<ERC20StatsDto> {
            return localVarFp.eRC20TransferControllerGetStats(from, to, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get ERC20 transfers with optional from/to filtering
         * @param {string} [from] Filter by sender address
         * @param {string} [to] Filter by receiver address
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRC20TransferControllerGetTransfers(from?: string, to?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<ERC20TransferControllerGetTransfers200Response> {
            return localVarFp.eRC20TransferControllerGetTransfers(from, to, offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ERC20TransfersApi - interface
 * @export
 * @interface ERC20TransfersApi
 */
export interface ERC20TransfersApiInterface {
    /**
     * 
     * @summary Get ERC20 transfer statistics with optional filtering
     * @param {string} [from] Filter by sender address
     * @param {string} [to] Filter by receiver address
     * @param {string} [startTime] Start time filter (ISO string)
     * @param {string} [endTime] End time filter (ISO string)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERC20TransfersApiInterface
     */
    eRC20TransferControllerGetStats(from?: string, to?: string, startTime?: string, endTime?: string, options?: RawAxiosRequestConfig): AxiosPromise<ERC20StatsDto>;

    /**
     * 
     * @summary Get ERC20 transfers with optional from/to filtering
     * @param {string} [from] Filter by sender address
     * @param {string} [to] Filter by receiver address
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERC20TransfersApiInterface
     */
    eRC20TransferControllerGetTransfers(from?: string, to?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<ERC20TransferControllerGetTransfers200Response>;

}

/**
 * ERC20TransfersApi - object-oriented interface
 * @export
 * @class ERC20TransfersApi
 * @extends {BaseAPI}
 */
export class ERC20TransfersApi extends BaseAPI implements ERC20TransfersApiInterface {
    /**
     * 
     * @summary Get ERC20 transfer statistics with optional filtering
     * @param {string} [from] Filter by sender address
     * @param {string} [to] Filter by receiver address
     * @param {string} [startTime] Start time filter (ISO string)
     * @param {string} [endTime] End time filter (ISO string)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERC20TransfersApi
     */
    public eRC20TransferControllerGetStats(from?: string, to?: string, startTime?: string, endTime?: string, options?: RawAxiosRequestConfig) {
        return ERC20TransfersApiFp(this.configuration).eRC20TransferControllerGetStats(from, to, startTime, endTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get ERC20 transfers with optional from/to filtering
     * @param {string} [from] Filter by sender address
     * @param {string} [to] Filter by receiver address
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERC20TransfersApi
     */
    public eRC20TransferControllerGetTransfers(from?: string, to?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return ERC20TransfersApiFp(this.configuration).eRC20TransferControllerGetTransfers(from, to, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}

