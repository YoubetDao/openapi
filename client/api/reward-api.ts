/* tslint:disable */
/* eslint-disable */
/**
 * YouBet Task API
 * YouBet Task RESTful API 文档
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { RewardSignatureDto } from '../models';
/**
 * RewardApi - axios parameter creator
 * @export
 */
export const RewardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardControllerCreateReward: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rewardControllerCreateReward', 'body', body)
            const localVarPath = `/rewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} status 
         * @param {string} projectList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardControllerGetMyRewards: async (status: string, projectList: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('rewardControllerGetMyRewards', 'status', status)
            // verify required parameter 'projectList' is not null or undefined
            assertParamExists('rewardControllerGetMyRewards', 'projectList', projectList)
            const localVarPath = `/my-rewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (projectList !== undefined) {
                localVarQueryParameter['projectList'] = projectList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardControllerGetRewardSignature: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('rewardControllerGetRewardSignature', 'uuid', uuid)
            const localVarPath = `/rewards/{uuid}/signature`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} status 
         * @param {string} projectList 
         * @param {string} recipientList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardControllerGetRewards: async (status: string, projectList: string, recipientList: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('rewardControllerGetRewards', 'status', status)
            // verify required parameter 'projectList' is not null or undefined
            assertParamExists('rewardControllerGetRewards', 'projectList', projectList)
            // verify required parameter 'recipientList' is not null or undefined
            assertParamExists('rewardControllerGetRewards', 'recipientList', recipientList)
            const localVarPath = `/rewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (projectList !== undefined) {
                localVarQueryParameter['projectList'] = projectList;
            }

            if (recipientList !== undefined) {
                localVarQueryParameter['recipientList'] = recipientList;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RewardApi - functional programming interface
 * @export
 */
export const RewardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RewardApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rewardControllerCreateReward(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rewardControllerCreateReward(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardApi.rewardControllerCreateReward']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} status 
         * @param {string} projectList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rewardControllerGetMyRewards(status: string, projectList: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rewardControllerGetMyRewards(status, projectList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardApi.rewardControllerGetMyRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rewardControllerGetRewardSignature(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RewardSignatureDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rewardControllerGetRewardSignature(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardApi.rewardControllerGetRewardSignature']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} status 
         * @param {string} projectList 
         * @param {string} recipientList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rewardControllerGetRewards(status: string, projectList: string, recipientList: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rewardControllerGetRewards(status, projectList, recipientList, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardApi.rewardControllerGetRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RewardApi - factory interface
 * @export
 */
export const RewardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RewardApiFp(configuration)
    return {
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardControllerCreateReward(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rewardControllerCreateReward(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} status 
         * @param {string} projectList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardControllerGetMyRewards(status: string, projectList: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rewardControllerGetMyRewards(status, projectList, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardControllerGetRewardSignature(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RewardSignatureDto> {
            return localVarFp.rewardControllerGetRewardSignature(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} status 
         * @param {string} projectList 
         * @param {string} recipientList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rewardControllerGetRewards(status: string, projectList: string, recipientList: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rewardControllerGetRewards(status, projectList, recipientList, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RewardApi - interface
 * @export
 * @interface RewardApi
 */
export interface RewardApiInterface {
    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardApiInterface
     */
    rewardControllerCreateReward(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} status 
     * @param {string} projectList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardApiInterface
     */
    rewardControllerGetMyRewards(status: string, projectList: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardApiInterface
     */
    rewardControllerGetRewardSignature(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<RewardSignatureDto>;

    /**
     * 
     * @param {string} status 
     * @param {string} projectList 
     * @param {string} recipientList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardApiInterface
     */
    rewardControllerGetRewards(status: string, projectList: string, recipientList: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * RewardApi - object-oriented interface
 * @export
 * @class RewardApi
 * @extends {BaseAPI}
 */
export class RewardApi extends BaseAPI implements RewardApiInterface {
    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardApi
     */
    public rewardControllerCreateReward(body: object, options?: RawAxiosRequestConfig) {
        return RewardApiFp(this.configuration).rewardControllerCreateReward(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} status 
     * @param {string} projectList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardApi
     */
    public rewardControllerGetMyRewards(status: string, projectList: string, options?: RawAxiosRequestConfig) {
        return RewardApiFp(this.configuration).rewardControllerGetMyRewards(status, projectList, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardApi
     */
    public rewardControllerGetRewardSignature(uuid: string, options?: RawAxiosRequestConfig) {
        return RewardApiFp(this.configuration).rewardControllerGetRewardSignature(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} status 
     * @param {string} projectList 
     * @param {string} recipientList 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardApi
     */
    public rewardControllerGetRewards(status: string, projectList: string, recipientList: string, options?: RawAxiosRequestConfig) {
        return RewardApiFp(this.configuration).rewardControllerGetRewards(status, projectList, recipientList, options).then((request) => request(this.axios, this.basePath));
    }
}

