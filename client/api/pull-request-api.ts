/* tslint:disable */
/* eslint-disable */
/**
 * YouBet Task API
 * YouBet Task RESTful API 文档
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * PullRequestApi - axios parameter creator
 * @export
 */
export const PullRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} projectGithubId 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullRequestControllerGetProjectPullRequests: async (projectGithubId: number, state: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectGithubId' is not null or undefined
            assertParamExists('pullRequestControllerGetProjectPullRequests', 'projectGithubId', projectGithubId)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('pullRequestControllerGetProjectPullRequests', 'state', state)
            const localVarPath = `/project/{projectGithubId}/pull-requests`
                .replace(`{${"projectGithubId"}}`, encodeURIComponent(String(projectGithubId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectList 
         * @param {string} state 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullRequestControllerGetPullRequests: async (projectList: string, state: string, namespace: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectList' is not null or undefined
            assertParamExists('pullRequestControllerGetPullRequests', 'projectList', projectList)
            // verify required parameter 'state' is not null or undefined
            assertParamExists('pullRequestControllerGetPullRequests', 'state', state)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('pullRequestControllerGetPullRequests', 'namespace', namespace)
            const localVarPath = `/pull-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectList !== undefined) {
                localVarQueryParameter['projectList'] = projectList;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PullRequestApi - functional programming interface
 * @export
 */
export const PullRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PullRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} projectGithubId 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullRequestControllerGetProjectPullRequests(projectGithubId: number, state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pullRequestControllerGetProjectPullRequests(projectGithubId, state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PullRequestApi.pullRequestControllerGetProjectPullRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectList 
         * @param {string} state 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pullRequestControllerGetPullRequests(projectList: string, state: string, namespace: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pullRequestControllerGetPullRequests(projectList, state, namespace, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PullRequestApi.pullRequestControllerGetPullRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PullRequestApi - factory interface
 * @export
 */
export const PullRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PullRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {number} projectGithubId 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullRequestControllerGetProjectPullRequests(projectGithubId: number, state: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pullRequestControllerGetProjectPullRequests(projectGithubId, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectList 
         * @param {string} state 
         * @param {string} namespace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pullRequestControllerGetPullRequests(projectList: string, state: string, namespace: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pullRequestControllerGetPullRequests(projectList, state, namespace, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PullRequestApi - interface
 * @export
 * @interface PullRequestApi
 */
export interface PullRequestApiInterface {
    /**
     * 
     * @param {number} projectGithubId 
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PullRequestApiInterface
     */
    pullRequestControllerGetProjectPullRequests(projectGithubId: number, state: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} projectList 
     * @param {string} state 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PullRequestApiInterface
     */
    pullRequestControllerGetPullRequests(projectList: string, state: string, namespace: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PullRequestApi - object-oriented interface
 * @export
 * @class PullRequestApi
 * @extends {BaseAPI}
 */
export class PullRequestApi extends BaseAPI implements PullRequestApiInterface {
    /**
     * 
     * @param {number} projectGithubId 
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PullRequestApi
     */
    public pullRequestControllerGetProjectPullRequests(projectGithubId: number, state: string, options?: RawAxiosRequestConfig) {
        return PullRequestApiFp(this.configuration).pullRequestControllerGetProjectPullRequests(projectGithubId, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectList 
     * @param {string} state 
     * @param {string} namespace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PullRequestApi
     */
    public pullRequestControllerGetPullRequests(projectList: string, state: string, namespace: string, options?: RawAxiosRequestConfig) {
        return PullRequestApiFp(this.configuration).pullRequestControllerGetPullRequests(projectList, state, namespace, options).then((request) => request(this.axios, this.basePath));
    }
}

