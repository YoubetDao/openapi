/* tslint:disable */
/* eslint-disable */
/**
 * YouBet Task API
 * YouBet Task RESTful API 文档
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PeriodControllerGetPeriods200Response } from '../models';
/**
 * PeriodApi - axios parameter creator
 * @export
 */
export const PeriodApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        periodControllerCreatePeriod: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/periods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {string} sortDirection 
         * @param {PeriodControllerGetPeriodsRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        periodControllerGetPeriods: async (projectId: string, sortDirection: string, rewardGranted?: PeriodControllerGetPeriodsRewardGrantedEnum, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('periodControllerGetPeriods', 'projectId', projectId)
            // verify required parameter 'sortDirection' is not null or undefined
            assertParamExists('periodControllerGetPeriods', 'sortDirection', sortDirection)
            const localVarPath = `/periods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (rewardGranted !== undefined) {
                localVarQueryParameter['rewardGranted'] = rewardGranted;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} periodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        periodControllerGrantRewards: async (periodId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'periodId' is not null or undefined
            assertParamExists('periodControllerGrantRewards', 'periodId', periodId)
            const localVarPath = `/periods/{periodId}/grant-rewards`
                .replace(`{${"periodId"}}`, encodeURIComponent(String(periodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeriodApi - functional programming interface
 * @export
 */
export const PeriodApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PeriodApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async periodControllerCreatePeriod(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.periodControllerCreatePeriod(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PeriodApi.periodControllerCreatePeriod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {string} sortDirection 
         * @param {PeriodControllerGetPeriodsRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async periodControllerGetPeriods(projectId: string, sortDirection: string, rewardGranted?: PeriodControllerGetPeriodsRewardGrantedEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeriodControllerGetPeriods200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.periodControllerGetPeriods(projectId, sortDirection, rewardGranted, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PeriodApi.periodControllerGetPeriods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} periodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async periodControllerGrantRewards(periodId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.periodControllerGrantRewards(periodId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PeriodApi.periodControllerGrantRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PeriodApi - factory interface
 * @export
 */
export const PeriodApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PeriodApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        periodControllerCreatePeriod(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.periodControllerCreatePeriod(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {string} sortDirection 
         * @param {PeriodControllerGetPeriodsRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        periodControllerGetPeriods(projectId: string, sortDirection: string, rewardGranted?: PeriodControllerGetPeriodsRewardGrantedEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<PeriodControllerGetPeriods200Response> {
            return localVarFp.periodControllerGetPeriods(projectId, sortDirection, rewardGranted, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} periodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        periodControllerGrantRewards(periodId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.periodControllerGrantRewards(periodId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PeriodApi - interface
 * @export
 * @interface PeriodApi
 */
export interface PeriodApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodApiInterface
     */
    periodControllerCreatePeriod(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} projectId 
     * @param {string} sortDirection 
     * @param {PeriodControllerGetPeriodsRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodApiInterface
     */
    periodControllerGetPeriods(projectId: string, sortDirection: string, rewardGranted?: PeriodControllerGetPeriodsRewardGrantedEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<PeriodControllerGetPeriods200Response>;

    /**
     * 
     * @param {string} periodId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodApiInterface
     */
    periodControllerGrantRewards(periodId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PeriodApi - object-oriented interface
 * @export
 * @class PeriodApi
 * @extends {BaseAPI}
 */
export class PeriodApi extends BaseAPI implements PeriodApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodApi
     */
    public periodControllerCreatePeriod(options?: RawAxiosRequestConfig) {
        return PeriodApiFp(this.configuration).periodControllerCreatePeriod(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {string} sortDirection 
     * @param {PeriodControllerGetPeriodsRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodApi
     */
    public periodControllerGetPeriods(projectId: string, sortDirection: string, rewardGranted?: PeriodControllerGetPeriodsRewardGrantedEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return PeriodApiFp(this.configuration).periodControllerGetPeriods(projectId, sortDirection, rewardGranted, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} periodId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodApi
     */
    public periodControllerGrantRewards(periodId: string, options?: RawAxiosRequestConfig) {
        return PeriodApiFp(this.configuration).periodControllerGrantRewards(periodId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PeriodControllerGetPeriodsRewardGrantedEnum = {
    All: 'all',
    Granted: 'granted',
    Ungranted: 'ungranted'
} as const;
export type PeriodControllerGetPeriodsRewardGrantedEnum = typeof PeriodControllerGetPeriodsRewardGrantedEnum[keyof typeof PeriodControllerGetPeriodsRewardGrantedEnum];
