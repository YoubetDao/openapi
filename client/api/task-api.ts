/* tslint:disable */
/* eslint-disable */
/**
 * YouBet Task API
 * YouBet Task RESTful API 文档
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ContributorRewardBodyDto } from '../models';
// @ts-ignore
import type { Receipt } from '../models';
// @ts-ignore
import type { Task } from '../models';
// @ts-ignore
import type { TaskApply } from '../models';
// @ts-ignore
import type { TaskControllerGetTasks200Response } from '../models';
// @ts-ignore
import type { TaskControllerMyTasks200Response } from '../models';
// @ts-ignore
import type { UpdateTaskDto } from '../models';
/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} projectList 
         * @param {TaskControllerGetCompletedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetCompletedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGetCompletedTasks: async (projectList: string, rewardGranted?: TaskControllerGetCompletedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetCompletedTasksRewardClaimedEnum, sort?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectList' is not null or undefined
            assertParamExists('taskControllerGetCompletedTasks', 'projectList', projectList)
            const localVarPath = `/tasks/completed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectList !== undefined) {
                localVarQueryParameter['projectList'] = projectList;
            }

            if (rewardGranted !== undefined) {
                localVarQueryParameter['rewardGranted'] = rewardGranted;
            }

            if (rewardClaimed !== undefined) {
                localVarQueryParameter['rewardClaimed'] = rewardClaimed;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [projects] Comma-separated list of project IDs to filter tasks
         * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
         * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
         * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
         * @param {TaskControllerGetManagedTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
         * @param {TaskControllerGetManagedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetManagedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {TaskControllerGetManagedTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGetManagedTasks: async (projects?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetManagedTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetManagedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetManagedTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetManagedTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks/managed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projects !== undefined) {
                localVarQueryParameter['projects'] = projects;
            }

            if (assignees !== undefined) {
                localVarQueryParameter['assignees'] = assignees;
            }

            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }

            if (states !== undefined) {
                localVarQueryParameter['states'] = states;
            }

            if (assignmentStatus !== undefined) {
                localVarQueryParameter['assignmentStatus'] = assignmentStatus;
            }

            if (rewardGranted !== undefined) {
                localVarQueryParameter['rewardGranted'] = rewardGranted;
            }

            if (rewardClaimed !== undefined) {
                localVarQueryParameter['rewardClaimed'] = rewardClaimed;
            }

            if (noGrantNeeded !== undefined) {
                localVarQueryParameter['noGrantNeeded'] = noGrantNeeded;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGetTask: async (githubId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'githubId' is not null or undefined
            assertParamExists('taskControllerGetTask', 'githubId', githubId)
            const localVarPath = `/tasks/{githubId}`
                .replace(`{${"githubId"}}`, encodeURIComponent(String(githubId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [project] Project ID to filter tasks
         * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
         * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
         * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
         * @param {TaskControllerGetTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
         * @param {TaskControllerGetTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {TaskControllerGetTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGetTasks: async (project?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            if (assignees !== undefined) {
                localVarQueryParameter['assignees'] = assignees;
            }

            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }

            if (states !== undefined) {
                localVarQueryParameter['states'] = states;
            }

            if (assignmentStatus !== undefined) {
                localVarQueryParameter['assignmentStatus'] = assignmentStatus;
            }

            if (rewardGranted !== undefined) {
                localVarQueryParameter['rewardGranted'] = rewardGranted;
            }

            if (rewardClaimed !== undefined) {
                localVarQueryParameter['rewardClaimed'] = rewardClaimed;
            }

            if (noGrantNeeded !== undefined) {
                localVarQueryParameter['noGrantNeeded'] = noGrantNeeded;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} taskId 
         * @param {ContributorRewardBodyDto} contributorRewardBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGrantRewards: async (taskId: string, contributorRewardBodyDto: ContributorRewardBodyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('taskControllerGrantRewards', 'taskId', taskId)
            // verify required parameter 'contributorRewardBodyDto' is not null or undefined
            assertParamExists('taskControllerGrantRewards', 'contributorRewardBodyDto', contributorRewardBodyDto)
            const localVarPath = `/tasks/{taskId}/rewards`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contributorRewardBodyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerMarkTaskAsNoGrantNeeded: async (githubId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'githubId' is not null or undefined
            assertParamExists('taskControllerMarkTaskAsNoGrantNeeded', 'githubId', githubId)
            const localVarPath = `/tasks/{githubId}/no-grant-needed`
                .replace(`{${"githubId"}}`, encodeURIComponent(String(githubId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} taskGithubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerMyTaskApply: async (taskGithubId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGithubId' is not null or undefined
            assertParamExists('taskControllerMyTaskApply', 'taskGithubId', taskGithubId)
            const localVarPath = `/tasks/{taskGithubId}/my-applies`
                .replace(`{${"taskGithubId"}}`, encodeURIComponent(String(taskGithubId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} states 
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerMyTasks: async (states: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'states' is not null or undefined
            assertParamExists('taskControllerMyTasks', 'states', states)
            const localVarPath = `/tasks/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (states !== undefined) {
                localVarQueryParameter['states'] = states;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} githubId 
         * @param {UpdateTaskDto} updateTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerUpdateTask: async (githubId: number, updateTaskDto: UpdateTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'githubId' is not null or undefined
            assertParamExists('taskControllerUpdateTask', 'githubId', githubId)
            // verify required parameter 'updateTaskDto' is not null or undefined
            assertParamExists('taskControllerUpdateTask', 'updateTaskDto', updateTaskDto)
            const localVarPath = `/tasks/{githubId}`
                .replace(`{${"githubId"}}`, encodeURIComponent(String(githubId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} projectList 
         * @param {TaskControllerGetCompletedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetCompletedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerGetCompletedTasks(projectList: string, rewardGranted?: TaskControllerGetCompletedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetCompletedTasksRewardClaimedEnum, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskControllerMyTasks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerGetCompletedTasks(projectList, rewardGranted, rewardClaimed, sort, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerGetCompletedTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [projects] Comma-separated list of project IDs to filter tasks
         * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
         * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
         * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
         * @param {TaskControllerGetManagedTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
         * @param {TaskControllerGetManagedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetManagedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {TaskControllerGetManagedTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerGetManagedTasks(projects?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetManagedTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetManagedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetManagedTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetManagedTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskControllerGetTasks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerGetManagedTasks(projects, assignees, priority, states, assignmentStatus, rewardGranted, rewardClaimed, noGrantNeeded, offset, limit, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerGetManagedTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerGetTask(githubId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerGetTask(githubId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerGetTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [project] Project ID to filter tasks
         * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
         * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
         * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
         * @param {TaskControllerGetTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
         * @param {TaskControllerGetTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {TaskControllerGetTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerGetTasks(project?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskControllerGetTasks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerGetTasks(project, assignees, priority, states, assignmentStatus, rewardGranted, rewardClaimed, noGrantNeeded, offset, limit, search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerGetTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} taskId 
         * @param {ContributorRewardBodyDto} contributorRewardBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerGrantRewards(taskId: string, contributorRewardBodyDto: ContributorRewardBodyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Receipt>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerGrantRewards(taskId, contributorRewardBodyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerGrantRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerMarkTaskAsNoGrantNeeded(githubId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerMarkTaskAsNoGrantNeeded(githubId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerMarkTaskAsNoGrantNeeded']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} taskGithubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerMyTaskApply(taskGithubId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskApply>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerMyTaskApply(taskGithubId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerMyTaskApply']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} states 
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerMyTasks(states: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskControllerMyTasks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerMyTasks(states, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerMyTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} githubId 
         * @param {UpdateTaskDto} updateTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerUpdateTask(githubId: number, updateTaskDto: UpdateTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerUpdateTask(githubId, updateTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.taskControllerUpdateTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * 
         * @param {string} projectList 
         * @param {TaskControllerGetCompletedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetCompletedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGetCompletedTasks(projectList: string, rewardGranted?: TaskControllerGetCompletedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetCompletedTasksRewardClaimedEnum, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<TaskControllerMyTasks200Response> {
            return localVarFp.taskControllerGetCompletedTasks(projectList, rewardGranted, rewardClaimed, sort, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [projects] Comma-separated list of project IDs to filter tasks
         * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
         * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
         * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
         * @param {TaskControllerGetManagedTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
         * @param {TaskControllerGetManagedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetManagedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {TaskControllerGetManagedTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGetManagedTasks(projects?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetManagedTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetManagedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetManagedTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetManagedTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<TaskControllerGetTasks200Response> {
            return localVarFp.taskControllerGetManagedTasks(projects, assignees, priority, states, assignmentStatus, rewardGranted, rewardClaimed, noGrantNeeded, offset, limit, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGetTask(githubId: number, options?: RawAxiosRequestConfig): AxiosPromise<Task> {
            return localVarFp.taskControllerGetTask(githubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [project] Project ID to filter tasks
         * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
         * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
         * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
         * @param {TaskControllerGetTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
         * @param {TaskControllerGetTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
         * @param {TaskControllerGetTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
         * @param {TaskControllerGetTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGetTasks(project?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<TaskControllerGetTasks200Response> {
            return localVarFp.taskControllerGetTasks(project, assignees, priority, states, assignmentStatus, rewardGranted, rewardClaimed, noGrantNeeded, offset, limit, search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} taskId 
         * @param {ContributorRewardBodyDto} contributorRewardBodyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerGrantRewards(taskId: string, contributorRewardBodyDto: ContributorRewardBodyDto, options?: RawAxiosRequestConfig): AxiosPromise<Array<Receipt>> {
            return localVarFp.taskControllerGrantRewards(taskId, contributorRewardBodyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerMarkTaskAsNoGrantNeeded(githubId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.taskControllerMarkTaskAsNoGrantNeeded(githubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} taskGithubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerMyTaskApply(taskGithubId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<TaskApply>> {
            return localVarFp.taskControllerMyTaskApply(taskGithubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} states 
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerMyTasks(states: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<TaskControllerMyTasks200Response> {
            return localVarFp.taskControllerMyTasks(states, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} githubId 
         * @param {UpdateTaskDto} updateTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerUpdateTask(githubId: number, updateTaskDto: UpdateTaskDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.taskControllerUpdateTask(githubId, updateTaskDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - interface
 * @export
 * @interface TaskApi
 */
export interface TaskApiInterface {
    /**
     * 
     * @param {string} projectList 
     * @param {TaskControllerGetCompletedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
     * @param {TaskControllerGetCompletedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerGetCompletedTasks(projectList: string, rewardGranted?: TaskControllerGetCompletedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetCompletedTasksRewardClaimedEnum, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<TaskControllerMyTasks200Response>;

    /**
     * 
     * @param {string} [projects] Comma-separated list of project IDs to filter tasks
     * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
     * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
     * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
     * @param {TaskControllerGetManagedTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
     * @param {TaskControllerGetManagedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
     * @param {TaskControllerGetManagedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
     * @param {TaskControllerGetManagedTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {string} [search] 搜索关键字
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerGetManagedTasks(projects?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetManagedTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetManagedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetManagedTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetManagedTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<TaskControllerGetTasks200Response>;

    /**
     * 
     * @param {number} githubId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerGetTask(githubId: number, options?: RawAxiosRequestConfig): AxiosPromise<Task>;

    /**
     * 
     * @param {string} [project] Project ID to filter tasks
     * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
     * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
     * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
     * @param {TaskControllerGetTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
     * @param {TaskControllerGetTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
     * @param {TaskControllerGetTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
     * @param {TaskControllerGetTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {string} [search] 搜索关键字
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerGetTasks(project?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig): AxiosPromise<TaskControllerGetTasks200Response>;

    /**
     * 
     * @param {string} taskId 
     * @param {ContributorRewardBodyDto} contributorRewardBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerGrantRewards(taskId: string, contributorRewardBodyDto: ContributorRewardBodyDto, options?: RawAxiosRequestConfig): AxiosPromise<Array<Receipt>>;

    /**
     * 
     * @param {number} githubId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerMarkTaskAsNoGrantNeeded(githubId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {number} taskGithubId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerMyTaskApply(taskGithubId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<TaskApply>>;

    /**
     * 
     * @param {string} states 
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerMyTasks(states: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<TaskControllerMyTasks200Response>;

    /**
     * 
     * @param {number} githubId 
     * @param {UpdateTaskDto} updateTaskDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskControllerUpdateTask(githubId: number, updateTaskDto: UpdateTaskDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI implements TaskApiInterface {
    /**
     * 
     * @param {string} projectList 
     * @param {TaskControllerGetCompletedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
     * @param {TaskControllerGetCompletedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerGetCompletedTasks(projectList: string, rewardGranted?: TaskControllerGetCompletedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetCompletedTasksRewardClaimedEnum, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerGetCompletedTasks(projectList, rewardGranted, rewardClaimed, sort, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [projects] Comma-separated list of project IDs to filter tasks
     * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
     * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
     * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
     * @param {TaskControllerGetManagedTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
     * @param {TaskControllerGetManagedTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
     * @param {TaskControllerGetManagedTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
     * @param {TaskControllerGetManagedTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {string} [search] 搜索关键字
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerGetManagedTasks(projects?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetManagedTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetManagedTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetManagedTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetManagedTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerGetManagedTasks(projects, assignees, priority, states, assignmentStatus, rewardGranted, rewardClaimed, noGrantNeeded, offset, limit, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} githubId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerGetTask(githubId: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerGetTask(githubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [project] Project ID to filter tasks
     * @param {string} [assignees] Comma-separated list of assignee usernames (e.g., user1,user2)
     * @param {string} [priority] Comma-separated list of priorities (p0,p1,p2)
     * @param {string} [states] Comma-separated list of task states (e.g., open,closed)
     * @param {TaskControllerGetTasksAssignmentStatusEnum} [assignmentStatus] Filter by assignment status
     * @param {TaskControllerGetTasksRewardGrantedEnum} [rewardGranted] Filter by reward granted status: all, granted, ungranted
     * @param {TaskControllerGetTasksRewardClaimedEnum} [rewardClaimed] Filter by reward claimed status: all, claimed, unclaimed
     * @param {TaskControllerGetTasksNoGrantNeededEnum} [noGrantNeeded] Filter by no grant needed status: all, no-grant-needed, grant-needed
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {string} [search] 搜索关键字
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerGetTasks(project?: string, assignees?: string, priority?: string, states?: string, assignmentStatus?: TaskControllerGetTasksAssignmentStatusEnum, rewardGranted?: TaskControllerGetTasksRewardGrantedEnum, rewardClaimed?: TaskControllerGetTasksRewardClaimedEnum, noGrantNeeded?: TaskControllerGetTasksNoGrantNeededEnum, offset?: number, limit?: number, search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerGetTasks(project, assignees, priority, states, assignmentStatus, rewardGranted, rewardClaimed, noGrantNeeded, offset, limit, search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} taskId 
     * @param {ContributorRewardBodyDto} contributorRewardBodyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerGrantRewards(taskId: string, contributorRewardBodyDto: ContributorRewardBodyDto, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerGrantRewards(taskId, contributorRewardBodyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} githubId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerMarkTaskAsNoGrantNeeded(githubId: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerMarkTaskAsNoGrantNeeded(githubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} taskGithubId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerMyTaskApply(taskGithubId: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerMyTaskApply(taskGithubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} states 
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerMyTasks(states: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerMyTasks(states, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} githubId 
     * @param {UpdateTaskDto} updateTaskDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskControllerUpdateTask(githubId: number, updateTaskDto: UpdateTaskDto, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).taskControllerUpdateTask(githubId, updateTaskDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TaskControllerGetCompletedTasksRewardGrantedEnum = {
    All: 'all',
    Granted: 'granted',
    Ungranted: 'ungranted'
} as const;
export type TaskControllerGetCompletedTasksRewardGrantedEnum = typeof TaskControllerGetCompletedTasksRewardGrantedEnum[keyof typeof TaskControllerGetCompletedTasksRewardGrantedEnum];
/**
 * @export
 */
export const TaskControllerGetCompletedTasksRewardClaimedEnum = {
    All: 'all',
    Claimed: 'claimed',
    Unclaimed: 'unclaimed'
} as const;
export type TaskControllerGetCompletedTasksRewardClaimedEnum = typeof TaskControllerGetCompletedTasksRewardClaimedEnum[keyof typeof TaskControllerGetCompletedTasksRewardClaimedEnum];
/**
 * @export
 */
export const TaskControllerGetManagedTasksAssignmentStatusEnum = {
    Assigned: 'assigned',
    Unassigned: 'unassigned',
    All: 'all'
} as const;
export type TaskControllerGetManagedTasksAssignmentStatusEnum = typeof TaskControllerGetManagedTasksAssignmentStatusEnum[keyof typeof TaskControllerGetManagedTasksAssignmentStatusEnum];
/**
 * @export
 */
export const TaskControllerGetManagedTasksRewardGrantedEnum = {
    All: 'all',
    Granted: 'granted',
    Ungranted: 'ungranted'
} as const;
export type TaskControllerGetManagedTasksRewardGrantedEnum = typeof TaskControllerGetManagedTasksRewardGrantedEnum[keyof typeof TaskControllerGetManagedTasksRewardGrantedEnum];
/**
 * @export
 */
export const TaskControllerGetManagedTasksRewardClaimedEnum = {
    All: 'all',
    Claimed: 'claimed',
    Unclaimed: 'unclaimed'
} as const;
export type TaskControllerGetManagedTasksRewardClaimedEnum = typeof TaskControllerGetManagedTasksRewardClaimedEnum[keyof typeof TaskControllerGetManagedTasksRewardClaimedEnum];
/**
 * @export
 */
export const TaskControllerGetManagedTasksNoGrantNeededEnum = {
    All: 'all',
    NoGrantNeeded: 'no-grant-needed',
    GrantNeeded: 'grant-needed'
} as const;
export type TaskControllerGetManagedTasksNoGrantNeededEnum = typeof TaskControllerGetManagedTasksNoGrantNeededEnum[keyof typeof TaskControllerGetManagedTasksNoGrantNeededEnum];
/**
 * @export
 */
export const TaskControllerGetTasksAssignmentStatusEnum = {
    Assigned: 'assigned',
    Unassigned: 'unassigned',
    All: 'all'
} as const;
export type TaskControllerGetTasksAssignmentStatusEnum = typeof TaskControllerGetTasksAssignmentStatusEnum[keyof typeof TaskControllerGetTasksAssignmentStatusEnum];
/**
 * @export
 */
export const TaskControllerGetTasksRewardGrantedEnum = {
    All: 'all',
    Granted: 'granted',
    Ungranted: 'ungranted'
} as const;
export type TaskControllerGetTasksRewardGrantedEnum = typeof TaskControllerGetTasksRewardGrantedEnum[keyof typeof TaskControllerGetTasksRewardGrantedEnum];
/**
 * @export
 */
export const TaskControllerGetTasksRewardClaimedEnum = {
    All: 'all',
    Claimed: 'claimed',
    Unclaimed: 'unclaimed'
} as const;
export type TaskControllerGetTasksRewardClaimedEnum = typeof TaskControllerGetTasksRewardClaimedEnum[keyof typeof TaskControllerGetTasksRewardClaimedEnum];
/**
 * @export
 */
export const TaskControllerGetTasksNoGrantNeededEnum = {
    All: 'all',
    NoGrantNeeded: 'no-grant-needed',
    GrantNeeded: 'grant-needed'
} as const;
export type TaskControllerGetTasksNoGrantNeededEnum = typeof TaskControllerGetTasksNoGrantNeededEnum[keyof typeof TaskControllerGetTasksNoGrantNeededEnum];
