/* tslint:disable */
/* eslint-disable */
/**
 * YouBet Task API
 * YouBet Task RESTful API 文档
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ImportProjectDto } from '../models';
// @ts-ignore
import type { ProjectControllerGetProjects200Response } from '../models';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerGetOwnerProject: async (search?: string, sort?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects/mine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerGetProjectDetail: async (githubId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'githubId' is not null or undefined
            assertParamExists('projectControllerGetProjectDetail', 'githubId', githubId)
            const localVarPath = `/projects/{githubId}`
                .replace(`{${"githubId"}}`, encodeURIComponent(String(githubId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tags 
         * @param {string} namespace 
         * @param {string} onlyPeriodicReward 
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerGetProjects: async (tags: string, namespace: string, onlyPeriodicReward: string, search?: string, sort?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tags' is not null or undefined
            assertParamExists('projectControllerGetProjects', 'tags', tags)
            // verify required parameter 'namespace' is not null or undefined
            assertParamExists('projectControllerGetProjects', 'namespace', namespace)
            // verify required parameter 'onlyPeriodicReward' is not null or undefined
            assertParamExists('projectControllerGetProjects', 'onlyPeriodicReward', onlyPeriodicReward)
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (namespace !== undefined) {
                localVarQueryParameter['namespace'] = namespace;
            }

            if (onlyPeriodicReward !== undefined) {
                localVarQueryParameter['onlyPeriodicReward'] = onlyPeriodicReward;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ImportProjectDto} importProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerImportProjectForUser: async (importProjectDto: ImportProjectDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'importProjectDto' is not null or undefined
            assertParamExists('projectControllerImportProjectForUser', 'importProjectDto', importProjectDto)
            const localVarPath = `/projects/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerModifyProject: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('projectControllerModifyProject', 'projectId', projectId)
            const localVarPath = `/projects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerGetOwnerProject(search?: string, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectControllerGetProjects200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerGetOwnerProject(search, sort, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerGetOwnerProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerGetProjectDetail(githubId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerGetProjectDetail(githubId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerGetProjectDetail']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} tags 
         * @param {string} namespace 
         * @param {string} onlyPeriodicReward 
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerGetProjects(tags: string, namespace: string, onlyPeriodicReward: string, search?: string, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectControllerGetProjects200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerGetProjects(tags, namespace, onlyPeriodicReward, search, sort, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerGetProjects']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ImportProjectDto} importProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerImportProjectForUser(importProjectDto: ImportProjectDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerImportProjectForUser(importProjectDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerImportProjectForUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectControllerModifyProject(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectControllerModifyProject(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.projectControllerModifyProject']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerGetOwnerProject(search?: string, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<ProjectControllerGetProjects200Response> {
            return localVarFp.projectControllerGetOwnerProject(search, sort, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} githubId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerGetProjectDetail(githubId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectControllerGetProjectDetail(githubId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tags 
         * @param {string} namespace 
         * @param {string} onlyPeriodicReward 
         * @param {string} [search] 搜索关键字
         * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
         * @param {number} [offset] 分页偏移量
         * @param {number} [limit] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerGetProjects(tags: string, namespace: string, onlyPeriodicReward: string, search?: string, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<ProjectControllerGetProjects200Response> {
            return localVarFp.projectControllerGetProjects(tags, namespace, onlyPeriodicReward, search, sort, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ImportProjectDto} importProjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerImportProjectForUser(importProjectDto: ImportProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectControllerImportProjectForUser(importProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectControllerModifyProject(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.projectControllerModifyProject(projectId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - interface
 * @export
 * @interface ProjectApi
 */
export interface ProjectApiInterface {
    /**
     * 
     * @param {string} [search] 搜索关键字
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectControllerGetOwnerProject(search?: string, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<ProjectControllerGetProjects200Response>;

    /**
     * 
     * @param {number} githubId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectControllerGetProjectDetail(githubId: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} tags 
     * @param {string} namespace 
     * @param {string} onlyPeriodicReward 
     * @param {string} [search] 搜索关键字
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectControllerGetProjects(tags: string, namespace: string, onlyPeriodicReward: string, search?: string, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<ProjectControllerGetProjects200Response>;

    /**
     * 
     * @param {ImportProjectDto} importProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectControllerImportProjectForUser(importProjectDto: ImportProjectDto, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApiInterface
     */
    projectControllerModifyProject(projectId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI implements ProjectApiInterface {
    /**
     * 
     * @param {string} [search] 搜索关键字
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerGetOwnerProject(search?: string, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerGetOwnerProject(search, sort, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} githubId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerGetProjectDetail(githubId: number, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerGetProjectDetail(githubId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} tags 
     * @param {string} namespace 
     * @param {string} onlyPeriodicReward 
     * @param {string} [search] 搜索关键字
     * @param {string} [sort] 排序字段，格式如 sort&#x3D;field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
     * @param {number} [offset] 分页偏移量
     * @param {number} [limit] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerGetProjects(tags: string, namespace: string, onlyPeriodicReward: string, search?: string, sort?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerGetProjects(tags, namespace, onlyPeriodicReward, search, sort, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ImportProjectDto} importProjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerImportProjectForUser(importProjectDto: ImportProjectDto, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerImportProjectForUser(importProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectControllerModifyProject(projectId: string, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectControllerModifyProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }
}

