openapi: 3.0.0
paths:
  /auth/github:
    get:
      operationId: AuthController_githubAuth
      parameters: []
      responses:
        "200":
          description: ""
      tags: &a1
        - Auth
  /auth/github/callback:
    get:
      operationId: AuthController_githubAuthRedirect
      parameters:
        - name: code
          required: true
          in: query
          description: GitHub OAuth2 code
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAuthDto"
      tags: *a1
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - App
  /github-webhook:
    post:
      operationId: GithubController_handleWebhook
      parameters: []
      responses:
        "201":
          description: ""
      tags:
        - Github
  /receipts/mine:
    get:
      operationId: ReceiptController_myReceipts
      parameters:
        - name: type
          required: false
          in: query
          description: "Filter by receipt type: all, reward, rewardClaimed"
          schema:
            enum:
              - task
              - period
              - all
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReceiptDto"
      tags: &a2
        - Receipt
  /receipts:
    get:
      operationId: ReceiptController_getReceipts
      parameters:
        - name: namespace
          required: false
          in: query
          description: Filter by namespace
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
        - name: search
          required: false
          in: query
          description: "搜索关键字 支持字段包括: recipient:wfnuser ...(TODO)"
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: 排序字段，格式如 sort=field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReceiptDto"
      tags: *a2
  /receipts/by-period:
    get:
      operationId: ReceiptController_getReceiptsByPeriodId
      parameters:
        - name: periodId
          required: false
          in: query
          description: Filter by periodId
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ReceiptDto"
      tags: *a2
  /youbet/wallet:
    get:
      operationId: YoubetController_getLinkedWallet
      parameters:
        - name: github
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
      tags: &a3
        - Youbet
    post:
      operationId: YoubetController_linkWallet
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LinkWalletDto"
      responses:
        "201":
          description: ""
      tags: *a3
  /youbet/user-points:
    get:
      operationId: YoubetController_getUserPoints
      parameters:
        - name: address
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a3
  /youbet/all-tasks:
    get:
      operationId: YoubetController_getAllTasks
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a3
  /users/me:
    get:
      operationId: UserController_myInfo
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileDto"
      tags: &a4
        - User
  /users/leaderboard:
    get:
      operationId: UserController_leaderboard
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserTaskCompletionDto"
      tags: *a4
  /users/profile/scan:
    post:
      operationId: UserController_scanProfile
      parameters: []
      responses:
        "200":
          description: ""
      tags: *a4
  /users/me/reputation:
    get:
      operationId: UserController_getMyReputation
      parameters: []
      responses:
        "200":
          description: Get current user reputation score
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserReputationDto"
      tags: *a4
  /rewards:
    get:
      operationId: RewardController_getRewards
      parameters:
        - name: status
          required: true
          in: query
          schema:
            type: string
        - name: projectList
          required: true
          in: query
          schema:
            type: string
        - name: recipientList
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: &a5
        - Reward
    post:
      operationId: RewardController_createReward
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRewardDto"
      responses:
        "201":
          description: ""
      tags: *a5
  /my-rewards:
    get:
      operationId: RewardController_getMyRewards
      parameters:
        - name: status
          required: true
          in: query
          schema:
            type: string
        - name: projectList
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a5
  /rewards/{uuid}/signature:
    get:
      operationId: RewardController_getRewardSignature
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RewardSignatureDto"
      tags: *a5
  /github/orgs/{org}/repos:
    get:
      operationId: OrgController_getOrgRepos
      parameters:
        - name: org
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GithubRepoDto"
      tags: &a6
        - Org
  /github/orgs:
    get:
      operationId: OrgController_getUserOrgs
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GithubOrganizationDto"
      tags: *a6
  /issues:
    post:
      operationId: IssueController_createIssue
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueDto"
      responses:
        default:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GithubIssueDto"
      summary: 创建Issue
      tags:
        - Issue
  /periods:
    post:
      operationId: PeriodController_createPeriod
      parameters: []
      responses:
        "201":
          description: ""
      tags: &a7
        - Period
    get:
      operationId: PeriodController_getPeriods
      parameters:
        - name: projectId
          required: true
          in: query
          schema:
            type: string
        - name: rewardGranted
          required: false
          in: query
          description: "Filter by reward granted status: all, granted, ungranted"
          schema:
            enum:
              - all
              - granted
              - ungranted
            type: string
        - name: sortDirection
          required: true
          in: query
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Period"
      tags: *a7
  /project/{projectGithubId}/pull-requests:
    get:
      operationId: PullRequestController_getProjectPullRequests
      parameters:
        - name: projectGithubId
          required: true
          in: path
          schema:
            type: number
        - name: state
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: &a8
        - PullRequest
  /pull-requests:
    get:
      operationId: PullRequestController_getPullRequests
      parameters:
        - name: projectList
          required: true
          in: query
          schema:
            type: string
        - name: state
          required: true
          in: query
          schema:
            type: string
        - name: namespace
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a8
  /tasks:
    get:
      operationId: TaskController_getTasks
      parameters:
        - name: project
          required: false
          in: query
          description: Project ID to filter tasks
          schema:
            type: string
        - name: assignees
          required: false
          in: query
          description: Comma-separated list of assignee usernames (e.g., user1,user2)
          schema:
            example: user1,user2
            type: string
        - name: priority
          required: false
          in: query
          description: Comma-separated list of priorities (p0,p1,p2)
          schema:
            example: p0,p1,p2
            type: string
        - name: states
          required: false
          in: query
          description: Comma-separated list of task states (e.g., open,closed)
          schema:
            example: open,closed
            type: string
        - name: assignmentStatus
          required: false
          in: query
          description: Filter by assignment status
          schema:
            enum:
              - assigned
              - unassigned
              - all
            type: string
        - name: rewardGranted
          required: false
          in: query
          description: "Filter by reward granted status: all, granted, ungranted"
          schema:
            enum:
              - all
              - granted
              - ungranted
            type: string
        - name: rewardClaimed
          required: false
          in: query
          description: "Filter by reward claimed status: all, claimed, unclaimed"
          schema:
            enum:
              - all
              - claimed
              - unclaimed
            type: string
        - name: noGrantNeeded
          required: false
          in: query
          description: "Filter by no grant needed status: all, no-grant-needed,
            grant-needed"
          schema:
            enum:
              - all
              - no-grant-needed
              - grant-needed
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
        - name: search
          required: false
          in: query
          description: 搜索关键字
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: 排序字段，格式如 sort=field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskDto"
      tags: &a9
        - Task
  /tasks/mine:
    get:
      operationId: TaskController_myTasks
      parameters:
        - name: states
          required: true
          in: query
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
      tags: *a9
  /tasks/managed:
    get:
      operationId: TaskController_getManagedTasks
      parameters:
        - name: projects
          required: false
          in: query
          description: Comma-separated list of project IDs to filter tasks
          schema:
            example: projectId1,projectId2
            type: string
        - name: assignees
          required: false
          in: query
          description: Comma-separated list of assignee usernames (e.g., user1,user2)
          schema:
            example: user1,user2
            type: string
        - name: priority
          required: false
          in: query
          description: Comma-separated list of priorities (p0,p1,p2)
          schema:
            example: p0,p1,p2
            type: string
        - name: states
          required: false
          in: query
          description: Comma-separated list of task states (e.g., open,closed)
          schema:
            example: open,closed
            type: string
        - name: assignmentStatus
          required: false
          in: query
          description: Filter by assignment status
          schema:
            enum:
              - assigned
              - unassigned
              - all
            type: string
        - name: rewardGranted
          required: false
          in: query
          description: "Filter by reward granted status: all, granted, ungranted"
          schema:
            enum:
              - all
              - granted
              - ungranted
            type: string
        - name: rewardClaimed
          required: false
          in: query
          description: "Filter by reward claimed status: all, claimed, unclaimed"
          schema:
            enum:
              - all
              - claimed
              - unclaimed
            type: string
        - name: noGrantNeeded
          required: false
          in: query
          description: "Filter by no grant needed status: all, no-grant-needed,
            grant-needed"
          schema:
            enum:
              - all
              - no-grant-needed
              - grant-needed
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
        - name: search
          required: false
          in: query
          description: 搜索关键字
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: 排序字段，格式如 sort=field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskDto"
      tags: *a9
  /tasks/completed:
    get:
      operationId: TaskController_getCompletedTasks
      parameters:
        - name: projectList
          required: true
          in: query
          schema:
            type: string
        - name: rewardGranted
          required: false
          in: query
          description: "Filter by reward granted status: all, granted, ungranted"
          schema:
            enum:
              - all
              - granted
              - ungranted
            type: string
        - name: rewardClaimed
          required: false
          in: query
          description: "Filter by reward claimed status: all, claimed, unclaimed"
          schema:
            enum:
              - all
              - claimed
              - unclaimed
            type: string
        - name: sort
          required: false
          in: query
          description: 排序字段，格式如 sort=field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
      tags: *a9
  /tasks/{githubId}:
    get:
      operationId: TaskController_getTask
      parameters:
        - name: githubId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
      tags: *a9
    patch:
      operationId: TaskController_updateTask
      parameters:
        - name: githubId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTaskDto"
      responses:
        "200":
          description: Task updated successfully
      tags: *a9
  /tasks/{githubId}/no-grant-needed:
    patch:
      operationId: TaskController_markTaskAsNoGrantNeeded
      parameters:
        - name: githubId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a9
  /tasks/{taskGithubId}/my-applies:
    get:
      operationId: TaskController_myTaskApply
      parameters:
        - name: taskGithubId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskApply"
      tags: *a9
  /tasks/{taskId}/rewards:
    post:
      operationId: TaskController_grantRewards
      parameters:
        - name: taskId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContributorRewardBodyDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Receipt"
      tags: *a9
  /task-applies:
    get:
      operationId: TaskApplyController_getTaskApplies
      parameters:
        - name: namespace
          required: true
          in: query
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PopulatedTaskApplyDto"
      tags: &a10
        - TaskApply
    post:
      operationId: TaskApplyController_applyTask
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyTaskDto"
      responses:
        "200":
          description: ""
      tags: *a10
  /task-applies/mine:
    get:
      operationId: TaskApplyController_myTaskApplies
      parameters:
        - name: project
          required: true
          in: query
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/TaskApply"
      tags: *a10
  /task-applies/{id}/withdraw:
    patch:
      operationId: TaskApplyController_withdrawApply
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a10
  /task-applies/{id}/approve:
    patch:
      operationId: TaskApplyController_approveTaskApply
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a10
  /task-applies/{id}/reject:
    patch:
      operationId: TaskApplyController_rejectTaskApply
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a10
  /projects:
    get:
      operationId: ProjectController_getProjects
      parameters:
        - name: tags
          required: true
          in: query
          schema:
            type: string
        - name: namespace
          required: true
          in: query
          schema:
            type: string
        - name: onlyPeriodicReward
          required: true
          in: query
          schema:
            type: string
        - name: search
          required: false
          in: query
          description: 搜索关键字
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: 排序字段，格式如 sort=field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
      tags: &a11
        - Project
  /projects/mine:
    get:
      operationId: ProjectController_getOwnerProject
      parameters:
        - name: search
          required: false
          in: query
          description: 搜索关键字
          schema:
            type: string
        - name: sort
          required: false
          in: query
          description: 排序字段，格式如 sort=field1:asc,field2:desc（多个排序用逗号分隔，方向为asc或desc）
          schema:
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
      tags: *a11
  /projects/{githubId}:
    get:
      operationId: ProjectController_getProjectDetail
      parameters:
        - name: githubId
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
      tags: *a11
  /projects/{projectId}:
    patch:
      operationId: ProjectController_modifyProject
      parameters:
        - name: projectId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a11
  /projects/import:
    post:
      operationId: ProjectController_importProjectForUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportProjectDto"
      responses:
        "201":
          description: ""
      tags: *a11
  /projects/assignees/involved:
    get:
      description: Get distinct assignees from all tasks under the specified projects
      operationId: ProjectController_getProjectInvolvedAssignees
      parameters:
        - name: projects
          required: false
          in: query
          description: Comma-separated list of project IDs
          schema:
            example: projectId1,projectId2
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/GithubUser"
      summary: Get all assignees involved in project tasks
      tags: *a11
  /projects/{projectId}/reports:
    get:
      operationId: ReportController_listReports
      parameters:
        - name: projectId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Report"
      tags: &a12
        - Report
  /reports/{reportId}:
    get:
      operationId: ReportController_getReport
      parameters:
        - name: reportId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags: *a12
    patch:
      operationId: ReportController_updateReport
      parameters:
        - name: reportId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateReportDto"
      responses:
        "200":
          description: ""
      tags: *a12
  /projects/{projectId}/reports/summarize:
    post:
      operationId: ReportController_summarizeProjectReport
      parameters:
        - name: projectId
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: ""
      tags: *a12
  /erc20-transfers/transfers:
    get:
      operationId: ERC20TransferController_getTransfers
      parameters:
        - name: from
          required: false
          in: query
          description: Filter by sender address
          schema:
            example: "0x1234567890123456789012345678901234567890"
            type: string
        - name: to
          required: false
          in: query
          description: Filter by receiver address
          schema:
            example: "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd"
            type: string
        - name: offset
          required: false
          in: query
          description: 分页偏移量
          schema:
            example: 0
            type: number
        - name: limit
          required: false
          in: query
          description: 每页数量
          schema:
            example: 10
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    type: object
                    properties:
                      totalCount:
                        type: number
                      totalPages:
                        type: number
                      currentPage:
                        type: number
                      hasNextPage:
                        type: boolean
                      hasPrevPage:
                        type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ERC20Transfer"
      summary: Get ERC20 transfers with optional from/to filtering
      tags: &a13
        - ERC20 Transfers
  /erc20-transfers/stats:
    get:
      operationId: ERC20TransferController_getStats
      parameters:
        - name: from
          required: false
          in: query
          description: Filter by sender address
          schema:
            example: "0x1234567890123456789012345678901234567890"
            type: string
        - name: to
          required: false
          in: query
          description: Filter by receiver address
          schema:
            example: "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd"
            type: string
        - name: startTime
          required: false
          in: query
          description: Start time filter (ISO string)
          schema:
            example: 2024-01-01T00:00:00.000Z
            type: string
        - name: endTime
          required: false
          in: query
          description: End time filter (ISO string)
          schema:
            example: 2024-12-31T23:59:59.999Z
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ERC20StatsDto"
      summary: Get ERC20 transfer statistics with optional filtering
      tags: *a13
info:
  title: YouBet Task API
  description: YouBet Task RESTful API 文档
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  schemas:
    UserAuthDto:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        photos:
          type: array
          items:
            type: string
        emails:
          type: array
          items:
            type: string
        jwt:
          type: string
        location:
          type: string
        bio:
          type: string
        followers:
          type: number
        following:
          type: number
        twitterUsername:
          type: string
        githubAccessToken:
          type: string
        adminNamespaces:
          type: array
          items:
            type: string
        adminProjects:
          type: array
          items:
            type: string
      required:
        - id
        - username
        - displayName
        - photos
        - emails
        - jwt
        - location
        - bio
        - followers
        - following
        - twitterUsername
        - githubAccessToken
        - adminNamespaces
        - adminProjects
    GithubUser:
      type: object
      properties:
        login:
          type: string
        htmlUrl:
          type: string
        avatarUrl:
          type: string
      required:
        - login
        - htmlUrl
        - avatarUrl
    Period:
      type: object
      properties:
        _id:
          type: string
        projectId:
          type: string
        from:
          format: date-time
          type: string
        to:
          format: date-time
          type: string
        pullRequests:
          type: array
          items:
            type: string
        commits:
          type: array
          items:
            type: string
        contributors:
          type: array
          items:
            $ref: "#/components/schemas/GithubUser"
        rewardGranted:
          type: boolean
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - _id
        - projectId
        - from
        - to
        - pullRequests
        - commits
        - contributors
        - rewardGranted
        - createdAt
        - updatedAt
    Tutorial:
      type: object
      properties: {}
    YoubetExtra:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
      required:
        - tags
    SchemaObjectId:
      type: object
      properties: {}
    Project:
      type: object
      properties:
        _id:
          type: string
        githubId:
          type: number
        name:
          type: string
        fullName:
          type: string
        owner:
          $ref: "#/components/schemas/GithubUser"
        language:
          type: string
        openIssuesCount:
          type: number
        forksCount:
          type: number
        stargazersCount:
          type: number
        contributorsCount:
          type: number
        description:
          type: string
        htmlUrl:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        tutorial:
          $ref: "#/components/schemas/Tutorial"
        youbetExtra:
          $ref: "#/components/schemas/YoubetExtra"
        namespace:
          $ref: "#/components/schemas/SchemaObjectId"
        approvedAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        periodicReward:
          type: object
        priority:
          type: number
        webhookUrl:
          type: string
      required:
        - _id
        - githubId
        - name
        - fullName
        - owner
        - language
        - openIssuesCount
        - forksCount
        - stargazersCount
        - contributorsCount
        - description
        - htmlUrl
        - createdAt
        - updatedAt
        - tutorial
        - youbetExtra
        - namespace
        - approvedAt
        - deletedAt
        - periodicReward
        - priority
        - webhookUrl
    LabelWithColorDto:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
      required:
        - name
        - color
    RewardDetail:
      type: object
      properties:
        amount:
          type: number
        decimals:
          type: number
        symbol:
          type: string
        tokenAddress:
          type: string
      required:
        - amount
        - decimals
        - symbol
        - tokenAddress
    Task:
      type: object
      properties:
        _id:
          type: string
        githubId:
          type: number
        project:
          $ref: "#/components/schemas/Project"
        title:
          type: string
        body:
          type: string
        state:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        closedAt:
          format: date-time
          type: string
        assignee:
          $ref: "#/components/schemas/GithubUser"
        assignees:
          type: array
          items:
            $ref: "#/components/schemas/GithubUser"
        labels:
          type: array
          items:
            type: string
        user:
          $ref: "#/components/schemas/GithubUser"
        labelsWithColor:
          type: array
          items:
            $ref: "#/components/schemas/LabelWithColorDto"
        htmlUrl:
          type: string
        namespace:
          $ref: "#/components/schemas/SchemaObjectId"
        reward:
          $ref: "#/components/schemas/RewardDetail"
        rewardGranted:
          type: boolean
        rewardClaimed:
          type: boolean
        noGrantNeeded:
          type: boolean
        level:
          type: string
        priority:
          type: string
          enum: &a14
            - p0
            - p1
            - p2
        storyPoints:
          type: number
        due:
          format: date-time
          type: string
      required:
        - _id
        - githubId
        - project
        - title
        - body
        - state
        - createdAt
        - updatedAt
        - closedAt
        - assignee
        - assignees
        - labels
        - user
        - labelsWithColor
        - htmlUrl
        - namespace
        - reward
        - rewardGranted
        - rewardClaimed
        - noGrantNeeded
        - level
    ReceiptSource:
      type: object
      properties:
        period:
          $ref: "#/components/schemas/Period"
        task:
          $ref: "#/components/schemas/Task"
      required:
        - period
        - task
    ReceiptDetail:
      type: object
      properties:
        amount:
          type: number
        decimals:
          type: number
        symbol:
          type: string
        chainId:
          type: number
        contractAddress:
          type: string
      required:
        - amount
        - decimals
        - symbol
        - chainId
        - contractAddress
    ReceiptTransactionInfo:
      type: object
      properties:
        chainId:
          type: number
        contractAddress:
          type: string
        from:
          type: string
        to:
          type: string
        txId:
          type: string
        txTimestamp:
          format: date-time
          type: string
      required:
        - chainId
        - contractAddress
        - from
        - to
        - txId
        - txTimestamp
    ReceiptDto:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        source:
          $ref: "#/components/schemas/ReceiptSource"
        type:
          type: string
        detail:
          $ref: "#/components/schemas/ReceiptDetail"
        transactionInfo:
          $ref: "#/components/schemas/ReceiptTransactionInfo"
        status:
          type: string
          enum:
            - pending
            - claimed
            - granted
            - failed
            - refunded
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - _id
        - user
        - source
        - type
        - detail
        - status
        - createdAt
        - updatedAt
    LinkWalletDto:
      type: object
      properties:
        address:
          type: string
      required:
        - address
    AchievementDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        stats:
          type: string
        date:
          type: string
        rarity:
          type: string
        icon:
          type: string
      required:
        - id
        - name
        - description
        - stats
        - date
        - rarity
    SkillsetChildDto:
      type: object
      properties:
        name:
          type: string
        percentage:
          type: number
      required:
        - name
        - percentage
    SkillsetDto:
      type: object
      properties:
        name:
          type: string
        percentage:
          type: number
        children:
          type: array
          items:
            $ref: "#/components/schemas/SkillsetChildDto"
      required:
        - name
        - percentage
        - children
    ContributedRepoDto:
      type: object
      properties:
        fullName:
          type: string
        stargazerCount:
          type: number
        contributions:
          type: number
      required:
        - fullName
        - stargazerCount
        - contributions
    UserProfileDto:
      type: object
      properties:
        _id:
          type: string
        username:
          type: string
        email:
          type: string
        avatarUrl:
          type: string
        displayName:
          type: string
        location:
          type: string
        bio:
          type: string
        followers:
          type: number
        following:
          type: number
        twitterUsername:
          type: string
        githubAccessToken:
          type: string
        githubRefreshToken:
          type: string
        adminNamespaces:
          type: array
          items:
            $ref: "#/components/schemas/SchemaObjectId"
        adminProjects:
          type: array
          items:
            $ref: "#/components/schemas/SchemaObjectId"
        ethMainWallet:
          type: string
        scanLatestJobId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        languages:
          type: object
          description: Language statistics with language names as keys
          example:
            JavaScript:
              percentage: 45.2
            TypeScript:
              percentage: 30.8
            Python:
              percentage: 24
        achievements:
          type: array
          items:
            $ref: "#/components/schemas/AchievementDto"
        skillset:
          type: array
          items:
            $ref: "#/components/schemas/SkillsetDto"
        contributedRepos:
          type: array
          items:
            $ref: "#/components/schemas/ContributedRepoDto"
        scanStatus:
          type: string
        scanUpdatedAt:
          format: date-time
          type: string
      required:
        - _id
        - username
        - email
        - avatarUrl
        - displayName
        - location
        - bio
        - followers
        - following
        - twitterUsername
        - githubAccessToken
        - githubRefreshToken
        - adminNamespaces
        - adminProjects
        - ethMainWallet
        - scanLatestJobId
        - createdAt
        - updatedAt
    UserTaskCompletionDto:
      type: object
      properties:
        username:
          type: string
        completedTasks:
          type: number
        displayName:
          type: string
        avatarUrl:
          type: string
        bio:
          type: string
      required:
        - username
        - completedTasks
        - displayName
        - avatarUrl
        - bio
    ReputationDetailsDto:
      type: object
      properties:
        completed:
          type: number
          description: Number of tasks completed on time
        delayedCompleted:
          type: number
          description: Number of tasks completed after deadline
        earlyAbandoned:
          type: number
          description: Number of tasks abandoned before deadline
        delayedAbandoned:
          type: number
          description: Number of tasks abandoned after deadline
      required:
        - completed
        - delayedCompleted
        - earlyAbandoned
        - delayedAbandoned
    UserReputationDto:
      type: object
      properties:
        score:
          type: number
          description: User reputation score (0-10)
          minimum: 0
          maximum: 10
          example: 7.5
        taskCount:
          type: number
          description: Number of tasks used for reputation calculation
          example: 20
        details:
          description: Breakdown of task completion details
          allOf:
            - $ref: "#/components/schemas/ReputationDetailsDto"
      required:
        - score
        - taskCount
        - details
    CreateRewardDto:
      type: object
      properties: {}
    RewardSignatureDto:
      type: object
      properties:
        signature:
          type: string
      required:
        - signature
    GithubUserDto:
      type: object
      properties:
        login:
          type: string
        username:
          type: string
        htmlUrl:
          type: string
        avatarUrl:
          type: string
        rewards:
          type: number
        _id:
          type: string
      required:
        - login
        - username
        - htmlUrl
        - avatarUrl
        - rewards
        - _id
    GithubRepoDto:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        full_name:
          type: string
        private:
          type: boolean
        owner:
          $ref: "#/components/schemas/GithubUserDto"
        html_url:
          type: string
        description:
          type: string
        created_at:
          type: string
      required:
        - id
        - name
        - full_name
        - private
        - owner
        - html_url
        - description
        - created_at
    GithubOrganizationDto:
      type: object
      properties:
        login:
          type: string
        id:
          type: number
        node_id:
          type: string
        url:
          type: string
        repos_url:
          type: string
        events_url:
          type: string
        hooks_url:
          type: string
        issues_url:
          type: string
        members_url:
          type: string
        public_members_url:
          type: string
        avatar_url:
          type: string
        description:
          type: string
      required:
        - login
        - id
        - node_id
        - url
        - repos_url
        - events_url
        - hooks_url
        - issues_url
        - members_url
        - public_members_url
        - avatar_url
        - description
    CreateIssueDto:
      type: object
      properties:
        owner:
          type: string
        repo:
          type: string
        title:
          type: string
        body:
          type: string
        labels:
          type: array
          items:
            type: string
        assignees:
          type: array
          items:
            type: string
      required:
        - owner
        - repo
        - title
        - body
        - labels
        - assignees
    GithubLabelDto:
      type: object
      properties:
        id:
          type: number
        node_id:
          type: string
        url:
          type: string
        name:
          type: string
        description:
          type: string
        color:
          type: string
        default:
          type: boolean
      required:
        - id
        - node_id
        - url
        - name
        - color
        - default
    GithubMilestoneDto:
      type: object
      properties:
        url:
          type: string
        html_url:
          type: string
        labels_url:
          type: string
        id:
          type: number
        node_id:
          type: string
        number:
          type: number
        state:
          type: string
        title:
          type: string
        description:
          type: string
        creator:
          $ref: "#/components/schemas/GithubUserDto"
        open_issues:
          type: number
        closed_issues:
          type: number
        created_at:
          type: string
        updated_at:
          type: string
        closed_at:
          type: string
        due_on:
          type: string
      required:
        - url
        - html_url
        - labels_url
        - id
        - node_id
        - number
        - state
        - title
        - creator
        - open_issues
        - closed_issues
        - created_at
        - updated_at
    GithubPullRequestRefDto:
      type: object
      properties:
        url:
          type: string
        html_url:
          type: string
        diff_url:
          type: string
        patch_url:
          type: string
      required:
        - url
        - html_url
        - diff_url
        - patch_url
    GithubIssueDto:
      type: object
      properties:
        id:
          type: number
        node_id:
          type: string
        url:
          type: string
        repository_url:
          type: string
        labels_url:
          type: string
        comments_url:
          type: string
        events_url:
          type: string
        html_url:
          type: string
        number:
          type: number
        state:
          type: string
        title:
          type: string
        body:
          type: string
        user:
          $ref: "#/components/schemas/GithubUserDto"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/GithubLabelDto"
        assignee:
          $ref: "#/components/schemas/GithubUserDto"
        assignees:
          type: array
          items:
            $ref: "#/components/schemas/GithubUserDto"
        milestone:
          $ref: "#/components/schemas/GithubMilestoneDto"
        locked:
          type: boolean
        active_lock_reason:
          type: string
        comments:
          type: number
        pull_request:
          $ref: "#/components/schemas/GithubPullRequestRefDto"
        closed_at:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        closed_by:
          $ref: "#/components/schemas/GithubUserDto"
        author_association:
          type: string
        state_reason:
          type: string
      required:
        - id
        - node_id
        - url
        - repository_url
        - labels_url
        - comments_url
        - events_url
        - html_url
        - number
        - state
        - title
        - body
        - user
        - comments
        - created_at
        - updated_at
        - author_association
    TaskProjectDto:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        htmlUrl:
          type: string
      required:
        - _id
        - name
        - htmlUrl
    TaskDto:
      type: object
      properties:
        _id:
          type: string
        githubId:
          type: number
        title:
          type: string
        body:
          type: string
        state:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        closedAt:
          format: date-time
          type: string
        assignee:
          $ref: "#/components/schemas/GithubUser"
        assignees:
          type: array
          items:
            $ref: "#/components/schemas/GithubUser"
        labels:
          type: array
          items:
            type: string
        user:
          $ref: "#/components/schemas/GithubUser"
        labelsWithColor:
          type: array
          items:
            $ref: "#/components/schemas/LabelWithColorDto"
        htmlUrl:
          type: string
        namespace:
          $ref: "#/components/schemas/SchemaObjectId"
        reward:
          $ref: "#/components/schemas/RewardDetail"
        rewardGranted:
          type: boolean
        rewardClaimed:
          type: boolean
        noGrantNeeded:
          type: boolean
        level:
          type: string
        priority:
          type: string
          enum: *a14
        storyPoints:
          type: number
        due:
          format: date-time
          type: string
        project:
          $ref: "#/components/schemas/TaskProjectDto"
      required:
        - _id
        - githubId
        - title
        - body
        - state
        - createdAt
        - updatedAt
        - closedAt
        - assignee
        - assignees
        - labels
        - user
        - labelsWithColor
        - htmlUrl
        - namespace
        - reward
        - rewardGranted
        - rewardClaimed
        - noGrantNeeded
        - level
        - project
    UpdateTaskDto:
      type: object
      properties:
        title:
          type: string
          description: Task title
        reward:
          description: Task reward details
          allOf:
            - $ref: "#/components/schemas/RewardDetail"
        level:
          type: string
          description: Task level
        priority:
          type: string
          enum:
            - p0
            - p1
            - p2
          description: Task priority (p0, p1, p2)
        storyPoints:
          type: number
          description: Story points for the task
        due:
          format: date-time
          type: string
          description: Due date for the task
    TaskApply:
      type: object
      properties:
        _id:
          type: string
        githubId:
          type: number
        project:
          $ref: "#/components/schemas/SchemaObjectId"
        task:
          $ref: "#/components/schemas/SchemaObjectId"
        user:
          $ref: "#/components/schemas/GithubUser"
        comment:
          type: string
        htmlUrl:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        canceledAt:
          format: date-time
          type: string
        approvedAt:
          format: date-time
          type: string
        namespace:
          $ref: "#/components/schemas/SchemaObjectId"
        projectName:
          type: string
        taskTitle:
          type: string
      required:
        - _id
        - githubId
        - project
        - task
        - user
        - comment
        - htmlUrl
        - createdAt
        - updatedAt
        - canceledAt
        - approvedAt
        - namespace
        - projectName
        - taskTitle
    ContributorRewardDto:
      type: object
      properties:
        contributor:
          type: string
        amount:
          type: number
        symbol:
          type: string
        decimals:
          type: number
      required:
        - contributor
        - amount
        - symbol
        - decimals
    ContributorRewardBodyDto:
      type: object
      properties:
        contributorRewards:
          type: array
          items:
            $ref: "#/components/schemas/ContributorRewardDto"
      required:
        - contributorRewards
    Receipt:
      type: object
      properties:
        user:
          type: string
        source:
          type: object
        type:
          type: string
        detail:
          type: object
        transactionInfo:
          type: object
        status:
          type: string
        grantedAt:
          format: date-time
          type: string
        claimedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - user
        - source
        - type
        - detail
        - transactionInfo
        - status
        - grantedAt
        - claimedAt
        - createdAt
        - updatedAt
    PopulatedTaskApplyDto:
      type: object
      properties:
        _id:
          type: string
        githubId:
          type: number
        project:
          $ref: "#/components/schemas/SchemaObjectId"
        user:
          $ref: "#/components/schemas/GithubUser"
        comment:
          type: string
        htmlUrl:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        canceledAt:
          format: date-time
          type: string
        approvedAt:
          format: date-time
          type: string
        namespace:
          $ref: "#/components/schemas/SchemaObjectId"
        projectName:
          type: string
        taskTitle:
          type: string
        task:
          $ref: "#/components/schemas/Task"
      required:
        - _id
        - githubId
        - project
        - user
        - comment
        - htmlUrl
        - createdAt
        - updatedAt
        - canceledAt
        - approvedAt
        - namespace
        - projectName
        - taskTitle
        - task
    ApplyTaskDto:
      type: object
      properties:
        taskGithubId:
          type: number
        comment:
          type: string
      required:
        - taskGithubId
        - comment
    ImportProjectDto:
      type: object
      properties:
        org:
          type: string
        project:
          type: string
        namespace:
          type: string
        tutorial:
          $ref: "#/components/schemas/Tutorial"
        youbetExtra:
          $ref: "#/components/schemas/YoubetExtra"
      required:
        - org
        - project
    ObjectId:
      type: object
      properties: {}
    Report:
      type: object
      properties:
        _id:
          type: string
        projectId:
          $ref: "#/components/schemas/ObjectId"
        from:
          format: date-time
          type: string
        to:
          format: date-time
          type: string
        issueCount:
          type: number
        users:
          type: array
          items:
            $ref: "#/components/schemas/GithubUser"
        title:
          type: string
        summary:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - _id
        - projectId
        - from
        - to
        - issueCount
        - users
        - title
        - summary
        - createdAt
        - updatedAt
    UpdateReportDto:
      type: object
      properties:
        title:
          type: string
        summary:
          type: string
      required:
        - title
        - summary
    ERC20Transfer:
      type: object
      properties: {}
    ERC20StatsFiltersDto:
      type: object
      properties:
        from:
          type: string
          description: Sender address filter
          example: "0x1234567890123456789012345678901234567890"
        to:
          type: string
          description: Receiver address filter
          example: "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd"
        startTime:
          format: date-time
          type: string
          description: Start time filter
          example: 2024-01-01T00:00:00.000Z
        endTime:
          format: date-time
          type: string
          description: End time filter
          example: 2024-12-31T23:59:59.999Z
    TokenValueDto:
      type: object
      properties:
        contractAddress:
          type: string
          description: Token contract address
          example: "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd"
        tokenSymbol:
          type: string
          description: Token symbol
          example: USDT
        tokenName:
          type: string
          description: Token name
          example: Tether USD
        tokenDecimal:
          type: number
          description: Token decimal places
          example: 6
        rawValue:
          type: string
          description: Raw total value (with decimals)
          example: "1500000000"
        formattedValue:
          type: string
          description: Formatted value (human readable)
          example: "1500.000000"
        transferCount:
          type: number
          description: Number of transfers for this token
          example: 25
      required:
        - contractAddress
        - tokenSymbol
        - tokenName
        - tokenDecimal
        - rawValue
        - formattedValue
        - transferCount
    ERC20TransferSummaryDto:
      type: object
      properties:
        hash:
          type: string
          description: Transaction hash
          example: 0xdef456...
        timestamp:
          format: date-time
          type: string
          description: Transaction timestamp
          example: 2024-01-30T15:30:00.000Z
        blockNumber:
          type: number
          description: Block number
          example: 12345678
        from:
          type: string
          description: Sender address
          example: "0x1234567890123456789012345678901234567890"
        to:
          type: string
          description: Receiver address
          example: "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd"
      required:
        - hash
        - timestamp
        - blockNumber
        - from
        - to
    ERC20StatsDto:
      type: object
      properties:
        filters:
          description: Applied filters
          allOf:
            - $ref: "#/components/schemas/ERC20StatsFiltersDto"
        totalTransfers:
          type: number
          description: Total number of transfers matching the filters
          example: 150
        tokenValues:
          description: Value aggregated by token contract
          type: array
          items:
            $ref: "#/components/schemas/TokenValueDto"
        sentCount:
          type: number
          description: Number of transfers sent by the from address (only when from filter
            is applied)
          example: 75
        sentTokenValues:
          description: Value sent by token contract (only when from filter is applied)
          type: array
          items:
            $ref: "#/components/schemas/TokenValueDto"
        receivedCount:
          type: number
          description: Number of transfers received by the to address (only when to filter
            is applied)
          example: 80
        receivedTokenValues:
          description: Value received by token contract (only when to filter is applied)
          type: array
          items:
            $ref: "#/components/schemas/TokenValueDto"
        latestTransfer:
          description: Latest transfer matching the filters
          allOf:
            - $ref: "#/components/schemas/ERC20TransferSummaryDto"
      required:
        - filters
        - totalTransfers
        - tokenValues
